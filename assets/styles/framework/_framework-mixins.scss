@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}

// media queries
@mixin MQ($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media only screen and (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`."+"Please make sure it is defined in `$breakpoints` map.";
  }
}
/* USAGE
.div {
  @include MQ('xs') {
    width: 100px;
  }
}
*/

// Generate columns
@mixin make-columns() {
  @each $item, $breakpoint in $breakpoints {
    @for $i from 1 to $grid-columns +1 {
      .grid-#{$item}-#{$i} {
        padding: $layout-gutter;
        @include MQ($item) {
          flex: none;
          width: percentage(($i / $grid-columns));
        }
      }
    }
  }
}


// Align
@mixin center($value) {
  @if $value == 'y' {
    margin-top: 50%;
    transform: translateY(-50%);
  } @else if $value == "x" {
    margin-left: 50%;
    transform: translateX(-50%);
  } @else if $value == "xy" {
    margin-left: 50%;
    margin-top: 50%;
    transform: translate(-50%);
  }
}
// Core mixins
@mixin control-shadow($color: $primary-color) {
  box-shadow: 0 0 0 .2rem fade($color, 15%);
}

@mixin control-transition() {
  transition: all .2s ease;
}

@mixin toast-variant($color) {
  background: fade($color, 90%);
  border-color: $color;
}

@mixin label-base() {
  border-radius: $border-radius;
  display: inline-block;
  line-height: 1;
  padding: .3rem .4rem;
  vertical-align: baseline;
}

@mixin label-variant($color) {
  background: $color;
  color: $light-color;
}
